{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nexport default function AuthUser() {\n  _s();\n\n  const navigate = useNavigate();\n\n  const getToken = () => {\n    const tokenString = sessionStorage.getItem('token');\n    const userToken = JSON.parse(tokenString);\n    return userToken;\n  };\n\n  const getUser = () => {\n    const userString = sessionStorage.getItem('user');\n    const user_detail = JSON.parse(userString);\n    return user_detail;\n  };\n\n  const [token, setToken] = useState(getToken());\n  const [user, setUser] = useState(getUser());\n  const [users, setUsers] = useState([]);\n  const [wpisy, setPosts] = useState([]);\n  const [komentarze, setKomentarze] = useState([]);\n\n  const saveToken = (user, token) => {\n    sessionStorage.setItem('token', JSON.stringify(token));\n    sessionStorage.setItem('user', JSON.stringify(user));\n    setToken(token);\n    setUser(user);\n    navigate('/');\n  };\n\n  const logout = () => {\n    sessionStorage.clear();\n    navigate('/login');\n  };\n\n  const http = axios.create({\n    baseURL: \"http://localhost:8000/api\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n\n  const fetchUsers = async () => {\n    try {\n      const response = await http.get('/users');\n      setUsers(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchPosts = async () => {\n    try {\n      const response = await http.get('/wpisy');\n      setPosts(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchComments = async wpisId => {\n    try {\n      const response = await http.get(`/commentsget/${wpisId}`);\n      setKomentarze(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getUserNickById = userId => {\n    const user = users.find(user => user.id === userId);\n    return user ? user.name : '';\n  };\n\n  useEffect(() => {\n    fetchUsers();\n    fetchPosts();\n  }, []);\n  return {\n    setToken: saveToken,\n    token,\n    user,\n    getToken,\n    getUser,\n    http,\n    logout,\n    users,\n    wpisy,\n    fetchUsers,\n    fetchPosts,\n    getUserNickById,\n    fetchComments,\n    komentarze\n  };\n}\n\n_s(AuthUser, \"JpYO0Pu8NmIFzPfZanV/QrZ+dSo=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthUser\");","map":{"version":3,"sources":["C:/Users/Artur/OneDrive/Pulpit/Szkielety/laravelprojekt/reactjs/src/components/AuthUser.js"],"names":["axios","useState","useEffect","useNavigate","AuthUser","navigate","getToken","tokenString","sessionStorage","getItem","userToken","JSON","parse","getUser","userString","user_detail","token","setToken","user","setUser","users","setUsers","wpisy","setPosts","komentarze","setKomentarze","saveToken","setItem","stringify","logout","clear","http","create","baseURL","headers","fetchUsers","response","get","data","error","console","fetchPosts","fetchComments","wpisId","getUserNickById","userId","find","id","name"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function AuthUser() {\n  const navigate = useNavigate();\n\n  const getToken = () => {\n    const tokenString = sessionStorage.getItem('token');\n    const userToken = JSON.parse(tokenString);\n    return userToken;\n  };\n\n  const getUser = () => {\n    const userString = sessionStorage.getItem('user');\n    const user_detail = JSON.parse(userString);\n    return user_detail;\n  };\n\n  const [token, setToken] = useState(getToken());\n  const [user, setUser] = useState(getUser());\n  const [users, setUsers] = useState([]);\n  const [wpisy, setPosts] = useState([]);\n  const [komentarze, setKomentarze] = useState([]);\n\n  const saveToken = (user, token) => {\n    sessionStorage.setItem('token', JSON.stringify(token));\n    sessionStorage.setItem('user', JSON.stringify(user));\n\n    setToken(token);\n    setUser(user);\n    navigate('/');\n  };\n\n  const logout = () => {\n    sessionStorage.clear();\n    navigate('/login');\n  };\n\n  const http = axios.create({\n    baseURL: \"http://localhost:8000/api\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n\n  const fetchUsers = async () => {\n    try {\n      const response = await http.get('/users');\n      setUsers(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchPosts = async () => {\n    try {\n      const response = await http.get('/wpisy');\n      setPosts(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchComments = async (wpisId) => {\n    try {\n      const response = await http.get(`/commentsget/${wpisId}`);\n      setKomentarze(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getUserNickById = (userId) => {\n    const user = users.find((user) => user.id === userId);\n    return user ? user.name : '';\n  };\n\n  useEffect(() => {\n    fetchUsers();\n    fetchPosts();\n  }, []);\n\n  return {\n    setToken: saveToken,\n    token,\n    user,\n    getToken,\n    getUser,\n    http,\n    logout,\n    users,\n    wpisy,\n    fetchUsers,\n    fetchPosts,\n    getUserNickById,\n    fetchComments,\n    komentarze\n  };\n}\n"]},"metadata":{},"sourceType":"module"}